buildscript {
  repositories {
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'org.standardout:gradle-versioneye-plugin:latest.release'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:latest.release'
  }
  configurations {
    classpath {
      resolutionStrategy {
        componentSelection {
          all { ComponentSelection selection ->
            def candidate = selection.candidate
            if (candidate.version ==~ /(?i)^.*(?:(?:alpha|beta|gamma|rc|snapshot).*|\bm\d+)$/) {
              selection.reject("${candidate.group}:${candidate.name}:${candidate.version} is not a production release.")
            }
          }
        }
      }
    }
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'findbugs'
  id 'jacoco'
  id 'java'
  id 'maven-publish'
}

apply plugin: 'org.standardout.versioneye'
apply plugin: 'com.github.kt3k.coveralls'

repositories {
  mavenCentral()
  jcenter()
}

sourceSets {
  integ {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file("$projectDir/src/integ/java")
    }
    resources.srcDir file("$projectDir/src/integ/resources")
  }
}

def resolutionStrategy = {
  resolutionStrategy {
    componentSelection {
      all { ComponentSelection selection ->
        def candidate = selection.candidate
        if (candidate.group == 'com.google.protobuf') {
          if (candidate.version ==~ /(?i)^.*(?:(?:alpha|snapshot).*|\bm\d+)$/) {
            selection.reject("${candidate.group}:${candidate.name}:${candidate.version} is not a stable-enough release.")
          }
        }
        else if (candidate.version ==~ /(?i)^.*(?:(?:alpha|beta|gamma|rc|snapshot).*|\bm\d+)$/) {
          selection.reject("${candidate.group}:${candidate.name}:${candidate.version} is not a production release.")
        }
      }
    }
  }
}

configurations {
  compile resolutionStrategy
  runtime resolutionStrategy
  testCompile resolutionStrategy
  testRuntime resolutionStrategy
  jacocoAgent resolutionStrategy
  jacocoAnt resolutionStrategy
  checkstyle resolutionStrategy
  // Integration tests
  integ resolutionStrategy
  integCompile.extendsFrom testCompile
  integRuntime.extendsFrom testRuntime
}

group = 'com.github.dylon'
archivesBaseName = name
version = '3.0.0' // http://semver.org/

description = 'Command-Line Interface to liblevenshtein (Java)'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'com.github.liblevenshtein.CommandLineInterface'

ext {
  srcJava = "$projectDir/src/main/java"
  srcDelomboked = "$buildDir/src-delomboked/main/java"
}

dependencies {
  compile "com.github.universal-automata:liblevenshtein:$version"
  compile 'com.google.code.findbugs:annotations:3.+'
  compile 'com.google.guava:guava:19.+'
  compile 'commons-cli:commons-cli:latest.release'
  compile 'org.apache.commons:commons-lang3:3.+'
  compile 'org.projectlombok:lombok:1.+'
  compile "org.slf4j:slf4j-api:1.7.+"

  runtime 'ch.qos.logback:logback-classic:1.1.+'
  runtime 'org.codehaus.groovy:groovy-all:2.4.7'
  runtime "org.slf4j:jcl-over-slf4j:1.7.+"
  runtime "org.slf4j:jul-to-slf4j:1.7.+"
  runtime "org.slf4j:log4j-over-slf4j:1.7.+"
  runtime "org.slf4j:osgi-over-slf4j:1.7.+"

  testCompile 'org.assertj:assertj-core:latest.release'
  testCompile 'org.mockito:mockito-all:1.+'
  testCompile 'org.projectlombok:lombok:latest.release'
  testCompile 'org.testng:testng:latest.release'

  testRuntime 'ch.qos.logback:logback-classic:latest.release'
  testRuntime 'org.codehaus.groovy:groovy-all:latest.release'
  testRuntime "org.slf4j:jcl-over-slf4j:1.7.+"
  testRuntime "org.slf4j:jul-to-slf4j:1.7.+"
  testRuntime "org.slf4j:log4j-over-slf4j:1.7.+"
  testRuntime "org.slf4j:osgi-over-slf4j:1.7.+"

  // JaCoCo (Plugin)
  jacocoAgent 'org.jacoco:org.jacoco.agent:latest.release'
  jacocoAnt 'org.jacoco:org.jacoco.ant:latest.release'

  // Checkstyle (Plugin)
  checkstyle 'com.puppycrawl.tools:checkstyle:latest.release'
}

jacocoTestReport {
  reports {
    xml.enabled = true // coveralls plugin depends on xml format report
    html.enabled = true
  }
}

findbugs {
  excludeFilter = file("$rootProject.projectDir/config/findbugs/exclude-filter.xml")
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:all"
}

test {
  useTestNG() {
    // Run as many tests in-parallel as there are CPU cores
    parallel 'methods'
    threadCount Runtime.getRuntime().availableProcessors()
  }

  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams true
    showExceptions true
    showStackTraces true
  }
}

task integ(type: Test) {
  useTestNG() {
    // Run as many tests in-parallel as there are CPU cores
    parallel 'methods'
    threadCount Runtime.getRuntime().availableProcessors()
  }

  testClassesDir = sourceSets.integ.output.classesDir
  classpath = sourceSets.integ.runtimeClasspath
  outputs.upToDateWhen { false } // always run integration tests
  testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full"
    showStandardStreams true
    showExceptions true
    showStackTraces true
  }
}

task delombok {
  dependsOn configurations.compile.getTaskDependencyFromProjectDependency(true, "compileJava")

  // Make sure the delombok directory exists ...
  file(srcDelomboked).mkdirs()

  inputs.files file(srcJava)
  outputs.dir file(srcDelomboked)

  doLast {
    ant.taskdef(
      name: 'delombok',
      classname: 'lombok.delombok.ant.Tasks$Delombok',
      classpath: configurations.compile.asPath)
    ant.delombok(
      from: srcJava,
      to: srcDelomboked,
      classpath: configurations.compile.asPath)
  }
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")
}

tasks.withType(Checkstyle) {
  def jsSrc = file("${projectDir}/src/checkstyle/js")
  def jsDest = file("${buildDir}/reports/checkstyle/js")
  def cssSrc = file("${projectDir}/src/checkstyle/css")
  def cssDest = file("${buildDir}/reports/checkstyle/css")
  doFirst {
    if (!jsDest.exists() && !jsDest.mkdirs()) {
      throw new IOException("Cannot create JavaScript directory [${jsDest}]")
    }
    if (!cssDest.exists() && !cssDest.mkdirs()) {
      throw new IOException("Cannot create CSS directory [${cssDest}]")
    }
    copy {
      from jsSrc
      into jsDest
    }
    copy {
      from cssSrc
      into cssDest
    }
  }
  reports {
    xml.enabled true
    html {
      enabled true
      stylesheet resources.text.fromFile('src/checkstyle/xslt/checkstyle.xsl')
    }
  }
}

check.dependsOn integ
integ.mustRunAfter test
integ.dependsOn installDist
